function job_struct=ef_current_base(job_struct)

%% MATLAB OR OCTAVE EXECUTION (BUILD M FILE)...
if strcmp(job_struct.batch_config.software,'octave')||strcmp(job_structbatch_config.software,'matlab');
    
    %% RUN EF_GEN_M...
    job_struct=ef_gen_m(job_struct);

    %% OBSOLETE... DO OCTAVE EXECUTION ... REQUIRES SSHFROMMATLAB ... MUCH OF THIS MAY NOT BE SPECIFIC TO OCTAVE
    % IT IS SPECIFIC TO BUILDING M FILES FOR EXECUTION IN EITHER
    % MATLAB OR OCTAVE... THE ELSE ALTERNATIVE IF FOR EXECUTING
    % BINARIES (NO M FILE GENERATION)...
    
    % BUILD M FILE FOR EXECUTION ON HOST ..
    
    %built inital portion of the string .m file to execute on the host.
    %add dependencies path... and navigate to work_path ...
    %THIS SHOULD NOT BE SPECIFIC TO OCTAVE...
    %THIS INITIAL PORTION OF THE M FILE SHOULD PROVIDE ALL OF
    %THE INFORMATION REQUIRED BY THE CONTEXT HOST TO EXECUTE
    %THE COMMANDS...    
    %% OBSOLETE SINCE EF_GEN_M... INITIATE BATCHINITSTR...
%    batchInitStr='';    
    %% OBSOLETE SINCE EF_GEN_M... IF DEPENDENCY PATH...
%    if ~isempty(CONTEXT_CONFIG.local_dependency)
%        batchInitStr=sprintf('%s%s%s%s\r', batchInitStr, ...
%            'addpath(genpath(''',CONTEXT_CONFIG.local_dependency, '''));');
%    end    
    %% OBSOLETE SINCE EF_GEN_M... IF WORK PATH...
%    if ~isempty(CONTEXT_CONFIG.local_project)
%        batchInitStr=sprintf('%s%s\r', batchInitStr, ...
%            ['cd ',CONTEXT_CONFIG.local_project,';']);
%    end    
    %% OBSOLETE SINCE EF_GEN_M... GENERIC INIT INFORMATION FOR M FILES...
    %disable warning messages...
%    batchInitStr=sprintf('%s%s\r\r',batchInitStr,'warning(''off'')');    
    %% OBSOLETE SINCE EF_GEN_M... GET THE STRING FROM THE HTB FILES AND START BUILDING BATCHHISTSTR...
    %Create batchHistStr from the current HistFName file...
%    [cPath,cRootHFName,cExt]=fileparts(HistFName);
%    eval(['fidRHT=fopen(''' HistFPath HistFName ''',''r'');']);
%    batchHistStr=char(fread(fidRHT,'char')');    
    %% OBSOLETE SINCE EF_GEN_M... BUILD THE DIRECTORY FOR THE TIME STAMPED M FILES IN THE
    % LOG PATH OF THE CURRENT ANALYSIS_ROOT FOLDER...
    %make directory named by history fname and date-time stamp.
%    dt=clock;
%    mPath=sprintf('%s_%s-%s-%s_%s-%s', ...
%        cRootHFName, ...
%        num2str(dt(1)), ...
%        num2str(dt(2)), ...
%        num2str(dt(3)), ...
%        num2str(dt(4)), ...
%        num2str(dt(5)));
%    mkdir(fullfile(CONTEXT_CONFIG.log,mPath));%CREATE LOG FOLDER IN log_path....
%    qsubstr='';    
    %% OBSOLETE SINCE EF_GEN_M... START LOOP THROUGH DATA FILES...
%    for bfni=1:length(BatchFName);
        %% OBSOLETE SINCE EF_GEN_M... DO FOR EACH DATA FILE ...        
        %% OBSOLETE SINCE EF_GEN_M... INITIATE TMPHISTSTR...
%        tmpHistStr=batchHistStr;        
        %% OBSOLETE SINCE EF_GEN_M... SWAP THE HISTORY STRING KEY STRINGS...
%        tmpHistStr=batch_strswap(tmpHistStr,batch_config, ...
%            'datafname',BatchFName{bfni}, ...
%            'datafpath',BatchFPath);        
        %% OBSOLETE SINCE EF_GEN_M... FINAL STRING TO SAVE AS *.M FOR EXECUTION...
%        batchStr=sprintf('%s%s',batchInitStr,tmpHistStr);        
        %% OBSOLETE SINCE EF_GEN_M... SAVE THE STRSWAPPED HISTORY STRING TO M FILE IN THE TIME STAMPED LOG PATH...
        % save cBatchFName m file...
%        [cPath,cRootFName,cExt]=fileparts(BatchFName{bfni});
%        cMFName=[cRootFName,'_',cRootHFName,'.m'];
%        fidM=fopen(fullfile(CONTEXT_CONFIG.log,mPath,cMFName),'w');%WRITE M FILE TO LOG PATH...
%        fwrite(fidM,batchStr,'char');
%        fclose(fidM);
%    end

%% EXECUTE M FILES IN THE CURRENT LOG PATH...
    disp(['Begining to execute scripts in ',fullfile(job_struct.context_config.log,job_struct.m_path)])
    addpath(fullfile(cd,job_struct.context_config.log,job_strct.m_path));
    d=dir([fullfile(job_struct.context_config.log,job_struct.m_path,'/*.m')]);
    for i=1:length(d)
        disp(['Evaluating... ',d(i).name,' from ',job_struct.m_path,' directory...']);
        try
            [tmp,evalfname]=fileparts(d(i).name);
            diary(fullfile(cd,job_struct.context_config.log,job_struct.m_path,[evalfname,'.log']));
            evalin('base',evalfname);
            diary('off');
        catch err
            fiderr=fopen(fullfile(cd,job_struct.context_config.log,job_struct.m_path,[evalfname,'.err']),'w');
            fprintf(fiderr,err.message);
            fclose(fiderr);
        end
    end
    rmpath(fullfile(cd,job_struct.context_config.log,job_struct.m_path));
    
end